import os
import sys
import logging
import asyncio
from flask import Flask, request, jsonify

sys.path.append(os.path.join(os.path.dirname(__file__), 'app'))

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
bot = None

try:
    from app.bot import PokerMentorBot
    bot = PokerMentorBot()
    logger.info("‚úÖ –ë–û–¢ –ó–ê–ì–†–£–ñ–ï–ù –ù–ê–•–£–ô!")
except Exception as e:
    logger.error(f"üí• –ë–û–¢ –ù–ï –ì–†–£–ó–ò–¢–°–Ø: {e}")

@app.route('/')
def home():
    return """
    <h1>üé≤ POKER BOT –ê–ö–¢–ò–í–ï–ù!</h1>
    <p>–ù–∞–ø–∏—à–∏ /start –≤ Telegram, —Å—É–∫–∞!</p>
    """

@app.route('/health')
def health():
    return jsonify({"status": "WORKING", "bot": "READY"})

@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        if not bot:
            return jsonify({"error": "Bot not loaded"}), 500
            
        data = request.get_json()
        logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {data}")
        
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
        async def process():
            from telegram import Update
            update = Update.de_json(data, bot.application.bot)
            await bot.application.process_update(update)
        
        asyncio.run(process())
        return jsonify({"status": "processed"})
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return jsonify({"error": str(e)}), 500

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
if bot:
    @app.before_first_request
    def setup_webhook():
        try:
            railway_url = "https://aproject-production-3cfa.up.railway.app"
            
            async def set_wh():
                await bot.application.bot.delete_webhook()
                result = await bot.application.bot.set_webhook(
                    url=f"{railway_url}/webhook",
                    secret_token=os.getenv('WEBHOOK_SECRET', 'ebuchiy_secret')
                )
                if result:
                    logger.info("‚úÖ –í–ï–ë–•–£–ö –£–°–¢–ê–ù–û–í–õ–ï–ù!")
                else:
                    logger.error("‚ùå –í–ï–ë–•–£–ö –ù–ï –£–°–¢–ê–ù–û–í–ò–õ–°–Ø!")
            
            asyncio.run(set_wh())
        except Exception as e:
            logger.error(f"üí• –í–µ–±—Ö—É–∫ –Ω–µ –ø–æ—Å—Ç–∞–≤–∏–ª—Å—è: {e}")

if __name__ == "__main__":
    port = int(os.getenv('PORT', 8000))
    logger.info(f"üöÄ –ó–ê–ü–£–°–ö–ê–ï–ú–°–Ø –ù–ê –ü–û–†–¢–£ {port}")
    app.run(host='0.0.0.0', port=port, debug=False)